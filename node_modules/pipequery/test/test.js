const pipequery = require('../index')
const es = require('event-stream')
const JSONStream = require('JSONStream')
var assert = require('assert');
describe('pipequery', function() {
  describe('run()', function() {
    it('one transform function', function() {
      let j = ["hello", "hell", "hello world", "bell"]
      let re = pipequery.run(j, [
        "x => x.filter(y => y.startsWith('h'))"
      ])
      console.log(re)
      assert.deepEqual(re, ["hello", "hell", "hello world"])
    });
    it('multiple transform functions', function() {
      let j = ["hello", "hell", "hello world", "bell"]
      let re = pipequery.run(j, [
        "x => x.filter(y => y.startsWith('h'))",
        "x => x.map(y => y.slice(0,2))"
      ])
      console.log(re)
      assert.deepEqual(re, ["he", "he", "he"])
    });
    it('regex', function() {
      let j = ["hello", "hell", "hello world", "bell"]
      let re = pipequery.run(j, [
        "x => x.filter(y => /ello/.test(y))",
      ])
      console.log(re)
      assert.deepEqual(re, ["hello", "hello world"])
    });
  });
  describe('pipe()', function() {
    it('pipe a JSON Stream', function() {
      let j = ["hello", "hell", "hello world", "bell"]
      let instream = es.readArray(j)
      let outstream = pipequery.pipe(instream, [ 
        "x => '[stream] ' + x"
      ])
      outstream.pipe(JSONStream.stringify("[", ",", "]"))
        .pipe(process.stdout)
      assert.equal(1,1)
    })
    it('pipe a large JSON Stream', function() {
      let arr = [];
      for(let i=0; i<100; i++) {
        arr[i] = i 
      }
      let instream = es.readArray(arr)
      let outstream = pipequery.pipe(instream, [ 
        "x => '[stream] ' + x"
      ])
      outstream.pipe(JSONStream.stringify("[\n", ",\n", "\n]"))
        .pipe(process.stdout)
      assert.equal(1,1)
    })
    it('pipe a large JSON Stream into multiple stages', function() {
      let arr = [];
      for(let i=0; i<100000; i++) {
        arr[i] = i 
      }
      let instream = es.readArray(arr)
      let outstream = pipequery.pipe(instream, [ 
        "x => (x%2 === 0 ? x : null)",
        "x => '[stream] ' + x"
      ])
      outstream.pipe(JSONStream.stringify("[\n", ",\n", "\n]"))
        .pipe(process.stdout)
      assert.equal(1,1)
    })
  })
});
