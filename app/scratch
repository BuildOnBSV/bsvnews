$group: {
  '_id': "$out",
  'tx': {
    $first: "$tx.0"
  },
  'blk': {
    $first: "$blk"
  }
}


works for twitter, instagram, wikipedia,reddit; different clients can charge different amounts
doesnt work for crypto kitties ownership, people can add their own tx to override

because people can replicate your client; charge a reasonable amount for your access to the network, not more


customer x is monetizing their content on my application
i have their ip address, their referral address, social media friends, browser fingerprint
they have clicked links from 2 different friends;
  i can triangulate using ip address, mutual friends, and browser fingerprint

customer y just left customer x a tip
i have their ip address, their referral address, social media friends, browser fingerprint
they have clicked links from 2 different friends
  i can determine their identity and moneybutton balance

application transparency becomes increasingly important in programmable money

moneybutton seems to scramble adddresses so its better not to publish recipient adddresses

could feasibly charge for posts, and filter query where amount is greater than a requirement

db.c.aggregate([{$unwind: "$out"},{$group: {'_id': "$tx.h",'blk': { $first: "$blk"},'out': {$first: "$out"}}},{$sort: {'blk.i': -1}},{$match: {'out.s2': {$regex: '\"t\":18.45'}}}])

db.c.aggregate([{$unwind: "$out"},{$group: {'_id': "$tx.h",'blk': { $first: "$blk"},'out': {$first: "$out"}}},{$sort: {'blk.i': -1}},{$match: {'out.s2': tx}}]


<<


AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create
  an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run. This example creates an EC2 security
  group for the instance to give you SSH access. **WARNING** This template
  creates an Amazon EC2 instance. You will be billed for the AWS resources used
  if you create a stack from this template.
#Parameters:
#   KeyName:
#     Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
#     Type: 'AWS::EC2::KeyPair::KeyName'
#     ConstraintDescription: must be the name of an existing EC2 KeyPair.
#   InstanceType:
#     Description: WebServer EC2 instance type
#     Type: String
#     Default: t2.micro
#     ConstraintDescription: must be a valid EC2 instance type.
#   SSHLocation:
#     Description: The IP address range that can be used to SSH to the EC2 instances
#     Type: String
#     MinLength: '9'
#     MaxLength: '18'
#     Default: 0.0.0.0/0
#     AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
#     ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t2.micro:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
      HVMG2: ami-0aeb704d503081ea6
Resources:
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref InstanceSecurityGroup
    #   KeyName: !Ref KeyName
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - t2.micro
          - Arch
      UserData: !Base64
        Fn::Base64: !Sub |
              #!/bin/bash
              curl â€“sL https://rpm.nodesource.com/setup_10.x | sudo bash -
              sudo yum install git nodejs -y
              git clone https://github.com/contentful/the-example-app.nodejs.git
              cd the-example-app.nodejs
              npm install
              npm start start:dev

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt
      - EC2Instance
      - AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt
      - EC2Instance
      - PublicDnsName
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt
      - EC2Instance
      - PublicIp




  >>
